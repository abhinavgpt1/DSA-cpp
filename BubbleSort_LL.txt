/*
Given a singly linked list of integers, sort it using 'Bubble Sort.'
Do by changing node and not data in O(n^2).
Using swap LL nodes will give O(n^3) complexity
*/
/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/
int length(Node * head){
    int count = 0;
    while(head!= NULL){
        head = head->next;
        count++;
    }
    return count;
}
Node *bubbleSort(Node *head)
{
    if(head == NULL || head->next == NULL)
        return head;
    int len = length(head);
    
    for(int i = 0 ; i<len; i++){
        Node* prev = NULL;
        Node* iter = head;
        while(iter->next!=NULL){
            Node *n1 = iter;
            Node *n2 = iter->next;
            if(n1->data > n2->data){
                if(prev == NULL){
                    head = n2;
                    n1->next = head->next;
                    head->next = n1;
                    prev = head;
                }
                else{
                    prev->next = n2;
                    n1->next = n2->next;
                    n2->next = n1;
                    prev = n2;
                }
            }
            else{
                prev = iter;
                iter = iter->next;
            }
            	
        }
    }
    return head;
}

//older but same
Node *bubbleSort_old(Node *head)
{
	// Write your code here
    if(head == NULL || head->next == NULL)
        return head;
    
    int len = length(head);
    for(int i = 1; i <= len; i++){
      	Node *prev = NULL;
    	Node *curr = head;
        // while(curr->next != NULL)
           for(;curr->next!=NULL;){
        	if(curr->data > curr->next->data)
        	{
                if(prev == NULL){
                    head = curr->next;
                    curr->next = head->next;
                    head->next = curr;
                    prev = head;
                }
                else{
                    prev->next = curr->next;
                    curr->next = prev->next->next;
                    prev->next->next = curr;
                    prev = prev->next;
                }
                //naive way
            	// int temp = curr->data;
            	// curr->data = curr->next->data;
            	// curr->next->data = temp;
        	}
            else
            {
                prev = curr;
                curr = curr->next;
            }
    	}
    }
    return head;
    
}