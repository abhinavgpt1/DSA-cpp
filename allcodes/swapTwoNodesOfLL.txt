/*
You have been given a singly linked list of integers along with two integers, 'i,' and 'j.' Swap the nodes that are present at the 'i-th' and 'j-th' positions.
Note :
Remember, the nodes themselves must be swapped and not the datas.

No need to print the list, it has already been taken care. Only return the new head to the list.
*/
/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/
int length(Node * head){
    if(head==NULL)
        return 0;
    int count=1;
    while(head != NULL)
    {
        head = head-> next;
        count++;
    }
    return count;
}
Node *swapNodes(Node *head, int i, int j)
{
	//Write your code here
    int len = length(head);
    if(i < 0 || j < 0 || i >= len || j >= len || i==j)
        return head;
    
    Node *previ = NULL;
    Node *curri = NULL;
    Node *prevj = NULL;
    Node *currj = NULL;
    
    Node * iter = head;
    int count = 0;
    while(iter != NULL){
        if(count == i-1)
            previ = iter;
        if(count == j-1)
            prevj = iter;
        iter = iter->next;
        count++;
    }
    if(i == 0)
        curri = head;
    else
        curri = previ->next;
    if(j == 0)
        currj = head;
    else
        currj = prevj->next;
    
    //replacing prev's
    if(previ == NULL)
    	head = currj;//eg, i = 0, j = 4
    else
        previ->next = currj;
    
    if(prevj == NULL)
    	head = curri;
    else
        prevj->next = curri;
    
    //replacing next's
    Node *temp = curri->next;
    curri->next = currj->next;
    currj->next = temp;
    
    return head;
}

//little ellaborative
Node *swapNodes2(Node *head, int i, int j)
{
	//Write your code here
    Node* previ = head, *prevj = head;
    int counti = 0, countj = 0;
    while(previ!= NULL && counti<i-1){
        previ = previ->next;
        counti++;
    }
    while(prevj!= NULL && countj<j-1){
        prevj = prevj->next;
        countj++;
    }
    if(previ == NULL || prevj == NULL || previ->next == NULL || prevj->next == NULL || i == j)
        return head;
    
    Node*iteri = previ->next;
    Node*iterj = prevj->next;
    if(i == 0){
        Node*temp = head->next;
        prevj->next = head;
        head->next = iterj->next;
        head = iterj;
        iterj->next = temp;
    }
    else if(j == 0){
        Node*temp = head->next;
        previ->next = head;
        head->next = iteri->next;
        head = iteri;
        iteri->next = temp;
    }
    else{
    	previ->next = iterj;
    	prevj->next = iteri;
    	Node *temp = iteri->next;
    	iteri->next = iterj->next;
    	iterj->next = temp;    
    }
    
    return head;
}