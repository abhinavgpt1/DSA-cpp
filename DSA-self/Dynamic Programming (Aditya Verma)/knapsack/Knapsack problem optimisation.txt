Knapsack memory optimization
----------------------------
In bottom-up approach, every [i][j] is filled with a row above [i-1][<someindex>]
SO, WE JUST REQUIRE A SINGLE VECTOR AS MEMORY OF LENGTH W = WEIGHT
Thus, reducing space complexity from O(n*W) to O(n).

Method: maintain 2 vectors prev and curr. Keep updating curr with values from prev
For i-> n:
	For j-> W:
	update curr using prev and some calculation
prev = curr
When inner loop ends, put prev = curr and continue the process.

NOTE: In most dp problems we require value from prev row or same row, hence space complexity can be reduced/

More effective approach: When we don't include the item, the dp[i][sum] value is copied from dp[i-1][sum] -> hence value doesn't change or in other terms, dp[i][sum] changes only when dp[i-1][sum-arr[i]] + val[i] > dp[i-1][sum]
So, we can keep just a single array to store results (last soln.)- https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/

More optimization - https://www.geeksforgeeks.org/unbounded-knapsack-repetition-items-allowed/