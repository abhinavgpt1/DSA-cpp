Knapsack memory optimization
Refer top down approach - 
every [i][j] is filled with a row above [i-1][<someindex>]
SO, WE JUST REQUIRE A SINGLE VECTOR AS MEMORY OF LENGTH W = WEIGHT
Thus, reducing space complexity from O(n*W) to O(n).

Method: maintain 2 vectors prev and curr. Keep updating curr with values from prev
For i-> n:
	For j-> W:
	update curr using prev and some calculation
prev = curr
When inner loop ends, put prev = curr and continue the process.

NOTE: In most dp problems we require value from prev row or same row, hence space complexity can be reduced/