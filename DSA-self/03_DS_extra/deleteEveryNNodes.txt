/*
You have been given a singly linked list of integers along with two integers, 'M,' and 'N.' Traverse the linked list such that you retain the 'M' nodes, then delete the next 'N' nodes. Continue the same until the end of the linked list.
To put it in other words, in the given linked list, you need to delete N nodes after every M nodes.
Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
*/
/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/

Node *skipMdeleteN(Node *head, int M, int N)
{
	// Write your code here
    if(head == NULL)
        return head;
    if(M == 0)
        return NULL;
    int count = 0;
    Node * iter = head, * prev = NULL;
    while(iter != NULL && count<M){
        prev = iter;
        iter = iter -> next;
        count++;
    }
    Node * mthIter = prev;
    int delCount = 0;
    while(iter != NULL && delCount < N){
        Node * temp = iter;
        iter = iter -> next;
        temp->next = NULL;
        delete temp;
        delCount++;
    }
    
    Node * smallAns = skipMdeleteN(iter, M, N);
    if(mthIter != NULL)
    	mthIter->next = smallAns;
    return head;
}

//previous solns.
/*
Node * deleteN(Node * head, int n){
    if(head == NULL)
        return head;
    Node * iter = head;
    int count = 1;
    while(count != n && iter != NULL){
        iter=iter->next;
        count++;
    }
    if(iter == NULL)
        return iter;
    return iter->next;
}
Node *skipMdeleteN(Node *head, int M, int N)
{
	// Write your code here
    if(head == NULL || N == 0)
        return head;
    if(M == 0)
        return NULL;
    
    
    Node * iter = head;
    int count = 1;
    while(iter!=NULL){
        if(count % M == 0)
        {
         	iter->next = deleteN(iter->next, N); 
        }
        iter = iter->next;
        count++;
    }
    return head;
}
*/
/*
//former former solution
node *deleteN(node *head,int n){
    int c=0;
    node *temp=head;
    
    while(c!=n){
        if(head==NULL)
            return NULL;
		head=head->next;
        c++;
        temp->next=NULL;
        delete temp;
        temp=head;
    }
    
    return head;
}
node* skipMdeleteN(node  *head, int M, int N) {
    // Write your code here
    if(head==NULL)
        return head;
    if(M<=0||N<=0)//would be clearly mentioned in actual problems
        return NULL;
    node *iter=head;
    int length=0;
    while(iter!=NULL){
        length++;
        iter=iter->next;
    }
    if(M>length || N>length)
        return head;
    //till here m, n are legit
    // node*temp=deleteN(head->next->next->next,N);
    // cout<<temp->data<<endl;
	int c1=1;
    iter=head;
    
    while(iter->next!=NULL){
        if(c1==M){
            node*temp=deleteN(iter->next,N);
            iter->next=temp;
			c1=0;
            if(temp==NULL)
                break;
        }
        c1++;
        iter=iter->next;
    }
    
    return head;
}
*/


