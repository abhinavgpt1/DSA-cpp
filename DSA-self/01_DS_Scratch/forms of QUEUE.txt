//limitless length queue
/*
#include <stdio.h>
#include<stdlib.h>
//#include<string.h>
#include<limits.h>
struct queue
{
    int front;
    int rear;
    int *arr;
};
int menu()
{
    int n;
    printf("\n1.enqueue\n2.dequeue\n3.front\n4.show\n5.empty?\n6.exit\n");
    scanf("%d",&n);
    return n;
}
void enqueue(struct queue *q,int n)
{
    if(q->front==-1)
        q->front=0;//for 1st element
    q->arr[++q->rear]=n;
}
int dequeue(struct queue *q)
{
    if(q->front==-1)
    {
        printf("INITIALIZATION NOT DONE");
    return INT_MIN;//unitialized;
    }

    if(isEmpty(q))//just to show how to use isEmpty function
    {printf("QUEUE Empty");
    return INT_MIN;//when all elements are dequeue(q);
    }
    return q->arr[q->front++];
}
int first(struct queue *q)
{
    if(q->front==-1){
        printf("INITIALIZATION NOT DONE");
    return INT_MIN;//unitialized;
    }
    if(q->front==q->rear+1)
    {printf("QUEUE Empty\n");
    return INT_MIN;//when all elements are dequeue(q);
    }
    return q->arr[q->front];
}
void show(struct queue *q)
{
    if(q->front>q->rear || q->front==-1)
    {
        printf("QUEUE EMPTY\n");
        return;
    }
    int i;
    for(i=q->front;i<=q->rear;i++)
    printf("<-%d",q->arr[i]);
    printf("\n");
}
int isEmpty(struct queue *q)
{
    if(q->front==-1||q->front==q->rear+1)
    return 1;
    return 0;
}
int main()
{
    struct queue *q=(struct queue *)malloc(sizeof(struct queue));
    q->rear=q->front=-1;
    q->arr=(int*)malloc(sizeof(int));
    int n=0;
	while(n!=6)
	{
	    n=menu();
	    switch(n)
	    {
	        int i;
	        case 1:
	        //BEWARE OF BRACKETS
	            printf("\nEnter value:");
                scanf("%d",&i);
	            enqueue(q,i);break;
	        case 2:
	            i=dequeue(q);
	            printf("\n###%d dequeued###\n",i);
	            break;
	        case 3:
	            i=first(q);
	            printf("\n###%d is at first###\n",i);
	            break;
	        case 4:
	        show(q);break;
	        case 5:
	            i=isEmpty(q);
	            printf("%s\n",i==1?"YES":"NO");break;
	        case 6:
	        exit(0);break;
	        default:
	        printf("\n###Wrong input###\n");
	    }
	}
	getch();
	return 0;
}
*/
/*//with limited length
#include<stdio.h>
#include<stdlib.h>
#define SIZE 10
typedef struct
{
    int *arr;
    int front;
    int rear;
}queue;
void enqueue(queue *q,int n)
{
    if(q->front==-1)
        q->front++;
    if(q->rear==SIZE-1)
    printf("SPACE FULL\n");
    else
    {
        q->arr[++q->rear]=n;
    }
}
int isEmpty(queue *q)
{
    if(q->front==-1||q->front==q->rear+1)
    return 1;
    return 0;
}
int dequeue(queue *q)
{
    if(isEmpty(q))
    {printf("QUEUE EMPTY\n");return -1;}
    return q->arr[q->front++];
}

int first(queue *q)
{
    if(isEmpty(q))
    {printf("QUEUE EMPTY\n");return -1;}
    return q->arr[q->front];
}
void print(queue *q)
{
    if(isEmpty(q))
    printf("QUEUE EMPTY");
    else
    {
    int i;
    for(i=q->front;i<=q->rear;i++)
    printf("<-%d",(q->arr)[i]);
    printf("\n");
    }
}
int menu()
{
    int n;
    printf("\n1.enqueue\n2.dequeue\n3.front\n4.show\n5.empty?\n6.exit\n");
    scanf("%d",&n);
    return n;
}
int  main()
{
    queue q;
    q.front=q.rear=-1;
    q.arr=(int*)malloc(sizeof(int));
    enqueue(&q,1);
    enqueue(&q,2);
    enqueue(&q,3);
    dequeue(&q);
    printf("\n###%d###\n",first(&q));
    print(&q);

}
*/
/*//CIRCULAR QUEUE
#include<stdio.h>
#include<stdlib.h>
#define SIZE 4
typedef struct
{
    int arr[SIZE];
    int front;
    int rear;
}queue;

void enqueue(queue *q,int n)
{
    if(q->front==(q->rear+1)%SIZE)
    {printf("SPACE FULL\n");return;}
    if(q->front==-1)q->front=0;
    q->rear=(q->rear+1)%SIZE;
    q->arr[q->rear]=n;
}

int dequeue(queue *q)
{
    if(q->front==-1){printf("QUEUE EMPTY\n");return -1;}//special case no. 1
    if(q->front==q->rear){
        int temp=q->arr[q->front];//special case no. 2
        q->front=q->rear=-1;
    return temp;
    }
    int temp=q->front;
    q->front=(q->front+1)%SIZE;//general case
    return q->arr[temp];
}
int first(queue *q)
{
    if(q->front==-1)
    {printf("QUEUE EMPTY\n");return -1;}
    return q->arr[q->front];
}
void print(queue *q)
{
    if(q->front==-1 && q->rear==-1)
    printf("QUEUE EMPTY");
    else if(q->rear>=q->front)
    {
    int i;
    for(i=q->front;i<=q->rear;i++)
    printf("<-%d",(q->arr)[i]);
    printf("\n");
    }
    else
    {
        int i;
        for(i=q->front;i<SIZE;i++)
        printf("<-%d",(q->arr)[i]);
        for(i=0;i<=q->rear;i++)
        printf("<-%d",(q->arr)[i]);
        printf("\n");
    }
}
/* better approach
void print(queue *q)
	{
		int i=q->front;
		do
		{
			cout<<(q->arr)[i];
			i=(i+1)%SIZE;
		}while(i!=(q->rear+1)%SIZE);
	}
*/
int menu()
{
    int n;
    printf("\n1.enqueue\n2.dequeue\n3.front\n4.show\n5.empty?\n6.exit\n");
    scanf("%d",&n);
    return n;
}
int  main()
{
    queue q;
    q.front=q.rear=-1;
    while(1)
    {
    switch(menu())
    {
        case 1:
            {
            int no;
            printf("\nEnter element : ");
            scanf("%d",&no);
            if(no!=-1)
            enqueue(&q,no);
            else
            printf("\nSrry can't enqueue -1");
            break;
            }
        case 2:
            {
            int x=dequeue(&q);
            if(x!=-1)
            printf("\n%d dequeued---",x);
            break;
            }
            case 3:
            {
            int x=first(&q);
            if(x!=-1)
            printf("\n%d is at first---",x);
            break;
            }
        case 4:
            print(&q);
            break;
        case 5:
            if(q.front==-1)
            printf("YES");
            else
            printf("NO");
            break;
        case 6:
            exit(0);
            break;
        default:
            printf("Wrong input");
            break;
    }
    }
}
*/
/*
//DEQUE
#include<stdio.h>
#include<stdlib.h>
#define SIZE 5
typedef struct
{
    int arr[SIZE];
    int front;
    int rear;
}deque;

void insert_at_front(deque *q,int n)
{
    if(q->front>0)//as insertion goes in backward direction
    //OR if(q->front!=0 && q->front!=-1)
    q->arr[--q->front]=n;
    else
    printf("NO SPACE srry");
}
int delete_from_front(deque *q)
{
    if(q->front==-1||q->front==q->rear+1)//empty deque condition
    {printf("EMPTY mc");
    return -1;}
    return q->arr[q->front++];
}
void insert_at_rear(deque *q,int n)
{
    if(q->front==-1)
    q->front=0;
    if(q->rear!=SIZE-1)//as insertion goes in forward direction
    q->arr[++q->rear]=n;
}
int delete_from_rear(deque *q)
{
    if(q->rear==-1||q->front==q->rear+1)//empty deque condition
    {printf("EMPTY mc");return -1;}
    return q->arr[q->rear--];
}
int isEmpty(deque *q)
{
    if(q->front==-1||q->rear==-1||q->front==q->rear+1){printf("Empty mc");
    return 1;}
    return 0;
}
// int isFull(deque *q)//won't be useful as it would depend which 
// //function among insert_at_rear or insert_at_front calls it
// {
//     if(q->front==0 && q->rear==SIZE-1)
//     return 1;
//     return 0;
// }//TOTAL WASTE
void print(deque *q)
{
    int i;
    for(i=q->front;i<=q->rear;i++)
    printf("<-%d->",(q->arr)[i]);
    printf("\n");
}
int menu()
{
    int n;
    printf("\n1.enqueue\n2.dequeue\n3.front\n4.show\n5.empty?\n6.exit\n");
    scanf("%d",&n);
    return n;
}
int  main()
{
    deque q;
    q.front=q.rear=-1;
    //printf("%d",delete_from_front(&q));
    insert_at_rear(&q,1);
    insert_at_rear(&q,2);
    insert_at_rear(&q,3);
    delete_from_rear(&q);
    print(&q);
}
*/
/* //USING LL
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int info;
    struct node *next;
};
typedef struct 
{
    struct node *front,*rear;
}queue;
void createQueue(queue **q)
{
    (*q)->front=NULL;
    (*q)->rear=NULL;
}
struct node *createNode()
{
    struct node *temp=(struct node *)malloc(sizeof(struct node));
    temp->next=NULL;
    scanf("%d",&temp->info);
    return temp;
}
void enqueue(queue **q)
{
    struct node *temp=createNode();
    if((*q)->front==NULL)
    {(*q)->front=temp;
    (*q)->rear=temp;}
    else
    {
        (*q)->rear->next=temp;
        (*q)->rear=temp;//VERY IMPORTANT
    }
    
}
void enqueue2(queue *q)
{
    struct node *temp=createNode();
    if((q)->front==NULL)
    {(q)->front=temp;
    (q)->rear=temp;}
    else
    {
        (q)->rear->next=temp;
        (q)->rear=temp;
        //printf("%d",(*q)->rear->next->info);
    }
    
}
int isEmpty(queue **q)
{
    if((*q)->front==NULL)
    //if((*q)->front==NULL||(*q)->front==(*q)->rear->next)
    return 1;
    return 0;
}
struct node * dequeue(queue **q)
{
    if(!isEmpty(q))
    {
        struct node *temp=(*q)->front;
        
        if((*q)->front==(*q)->rear)
//this will just avoid the case for a memory of a node being wasted
        (*q)->front=(*q)->rear=NULL;
        
        else
        (*q)->front=(*q)->front->next;
        
        return temp;
    }
}
void printQueue(queue **q)
{
    if(!isEmpty(q))
    {
        struct node *iter=(*q)->front;
        while(iter!=NULL)
        {
            printf("%d<-",iter->info);
            iter=iter->next;
        }
    }
}
int main()
{
    queue *q=(queue *)malloc(sizeof(queue));
    createQueue(&q);
    // enqueue(&q);
    // enqueue(&q);
    // enqueue(&q);
    // dequeue(&q);
    // dequeue(&q);
    // dequeue(&q);
    // enqueue(&q);
    enqueue2(q);
    enqueue2(q);
    enqueue2(q);
    enqueue2(q);
    //BOTH enqueue and enqueue2 works fine since 'q' was allocated memory already in main
    //earlier in case of LL head wasn't given any memory
    printf("front=%d rear=%d\n",q->front->info,q->rear->info);
    printQueue(&q);
    
    
}
*/